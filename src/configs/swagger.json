{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Hotel API",
    "description": "",
    "contact": {
      "name": "Huseyin Karabas",
      "email": "ehkarabas@gmail.com",
      "url": "https://portfolio-ehkarabas.netlify.app/"
    },
    "license": {
      "name": "ISC"
    }
  },
  "host": "https://hotel-api-ehkarabas.onrender.com/",
  "basePath": "/",
  "schemes": ["http", "https"],
  "securityDefinitions": {
    "JWTAccess": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Enter Your AccessToken (JWT) for Login. Example: <b>Bearer <i>...accessToken...<i></b>"
    },
    "JWTRefresh": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Refresh-Token",
      "description": "Enter Your RefreshToken (JWT) to blacklist it on Logout and to validate whether blacklisted before on Refresh. Example: <b>...refreshToken...</b>"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login <Permissions: Public>",
        "description": "Login with username and password",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "admin@test.com"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer1234!"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/refresh_browsers": {
      "get": {
        "tags": ["Authentication"],
        "summary": "JWT: Refresh - Cookie <Permissions: Public>",
        "description": "Refresh access token via cookie.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/refresh_others": {
      "get": {
        "tags": ["Authentication"],
        "summary": "JWT: Refresh - API <Permissions: Public>",
        "description": "Refresh access token via refresh token. You need to set your refresh token to X-Refresh-Token header and access token to Authorization header in <Bearer ...accessToken...> format to refresh your access token.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Logout <Permissions: Public>",
        "description": "Delete refresh token from cookie and blacklist tokens. You need to set your refresh token to X-Refresh-Token header and access token to Authorization header in <Bearer ...accessToken...> format to safely blacklist them.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Single User <Permissions: Admin|Own>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update User <Permissions: Admin|Own>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "newuser@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer4321!"
                },
                "username": {
                  "type": "string",
                  "example": "newuniqueusername"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "isAdmin": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete User <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update User <Permissions: Admin|Own>",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "newuser@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer4321!"
                },
                "username": {
                  "type": "string",
                  "example": "newuniqueusername"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "isAdmin": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "List Users <Permissions: Admin>",
        "description": "\r  You can send query with endpoint for filter[], search[], sort[], page and limit.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new User <Permissions: Public>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "user@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "Qwer1234!"
                },
                "username": {
                  "type": "string",
                  "example": "uniqueusername"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "isAdmin": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/rooms/{roomId}": {
      "get": {
        "tags": ["Rooms"],
        "summary": "Get Single Room <Permissions: Public>",
        "description": "",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": ["Rooms"],
        "summary": "Update Room <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "room_number": {
                  "type": "number",
                  "example": 900
                },
                "images": {
                  "type": "array",
                  "example": ["uploads/default_hotel_room_pic.png"],
                  "items": {
                    "type": "string"
                  }
                },
                "bed_type": {
                  "type": "string",
                  "example": "King"
                },
                "price": {
                  "type": "number",
                  "example": 350
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": ["Rooms"],
        "summary": "Delete Room <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": ["Rooms"],
        "summary": "Update Room <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "room_number": {
                  "type": "number",
                  "example": 900
                },
                "images": {
                  "type": "array",
                  "example": ["uploads/default_hotel_room_pic.png"],
                  "items": {
                    "type": "string"
                  }
                },
                "bed_type": {
                  "type": "string",
                  "example": "King"
                },
                "price": {
                  "type": "number",
                  "example": 350
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/rooms/": {
      "get": {
        "tags": ["Rooms"],
        "summary": "List Rooms <Permissions: Public>",
        "description": "\r  You can send query with endpoint for filter[], search[], sort[], page and limit.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": ["Rooms"],
        "summary": "Create a new Room <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "room_number": {
                  "type": "number",
                  "example": 100
                },
                "images": {
                  "type": "array",
                  "example": ["uploads/default_hotel_room_pic.png"],
                  "items": {
                    "type": "string"
                  }
                },
                "bed_type": {
                  "type": "string",
                  "example": "Twin"
                },
                "price": {
                  "type": "number",
                  "example": 250
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/reservations/{reservationId}": {
      "get": {
        "tags": ["Reservations"],
        "summary": "Get Single Reservation <Permissions: Login>",
        "description": "",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": ["Reservations"],
        "summary": "Update Reservation <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "6604949d45251ddc39dfef17"
                },
                "roomId": {
                  "type": "string",
                  "example": "660202563031a220de52435d"
                },
                "arrival_date": {
                  "type": "string",
                  "example": "2024-04-30T13:00:00.000Z"
                },
                "departure_date": {
                  "type": "string",
                  "example": "2024-04-31T06:00:00.000Z"
                },
                "guest_number": {
                  "type": "number",
                  "example": 2
                },
                "night": {
                  "type": "number",
                  "example": 3
                },
                "price": {
                  "type": "number",
                  "example": 350
                },
                "total_price": {
                  "type": "number",
                  "example": 1050
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": ["Reservations"],
        "summary": "Delete Reservation <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": ["Reservations"],
        "summary": "Update Reservation <Permissions: Admin>",
        "description": "",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "6604949d45251ddc39dfef17"
                },
                "roomId": {
                  "type": "string",
                  "example": "660202563031a220de52435d"
                },
                "arrival_date": {
                  "type": "string",
                  "example": "2024-04-30T13:00:00.000Z"
                },
                "departure_date": {
                  "type": "string",
                  "example": "2024-04-31T06:00:00.000Z"
                },
                "guest_number": {
                  "type": "number",
                  "example": 2
                },
                "night": {
                  "type": "number",
                  "example": 3
                },
                "price": {
                  "type": "number",
                  "example": 350
                },
                "total_price": {
                  "type": "number",
                  "example": 1050
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/reservations/": {
      "get": {
        "tags": ["Reservations"],
        "summary": "List Reservations <Permissions: Login>",
        "description": "\r  You can send query with endpoint for filter[], search[], sort[], page and limit.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": ["Reservations"],
        "summary": "Create a new Reservation <Permissions: Login>",
        "description": "",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "6604949d45251ddc39dfef17"
                },
                "roomId": {
                  "type": "string",
                  "example": "660202563031a220de52435d"
                },
                "arrival_date": {
                  "type": "string",
                  "example": "2024-03-30T13:00:00.000Z"
                },
                "departure_date": {
                  "type": "string",
                  "example": "2024-03-31T06:00:00.000Z"
                },
                "guest_number": {
                  "type": "number",
                  "example": 1
                },
                "night": {
                  "type": "number",
                  "example": 1
                },
                "price": {
                  "type": "number",
                  "example": 250
                },
                "total_price": {
                  "type": "number",
                  "example": 250
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    }
  },
  "definitions": {
    "/auth/login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "/auth/refresh_others": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "description": {
              "type": "string",
              "example": "To refresh your access token on the API, set your refresh token in the 'X-Refresh-Token' header using the format '...refreshToken...' and place your access token in the 'Authorization' header with the format 'Bearer ...accessToken...'."
            }
          }
        }
      }
    },
    "/auth/refresh_browsers": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "description": {
              "type": "string",
              "example": "Just send a GET request to refresh your access token on browsers."
            }
          }
        }
      }
    },
    "/auth/logout": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "String"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "description": {
              "type": "string",
              "example": "To ensure your security when logging out, set your refresh token in the 'X-Refresh-Token' header using the format '...refreshToken...', and place your access token in the 'Authorization' header with the format 'Bearer ...accessToken...'. This procedure will effectively blacklist them."
            }
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "array",
              "example": [true, "Email field is required"],
              "items": {
                "type": "string"
              }
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [null],
              "items": {
                "type": "function"
              }
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "set": {
              "type": "function"
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Password must contain at least 1 uppercase & lowercase letter, 1 digit, 1 special character and must be between 8 and 16 characters in total."
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "username": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isAdmin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "Room": {
      "type": "object",
      "properties": {
        "room_number": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "images": {
          "type": "object",
          "properties": {
            "type": {
              "type": "array",
              "example": [null],
              "items": {
                "type": "function"
              }
            },
            "default": {
              "type": "array",
              "example": ["/uploads/default_hotel_room_pic.png"],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "bed_type": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": ["Single", "Twin", "King"],
              "items": {
                "type": "string"
              }
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "price": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Reservation": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "roomId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Room"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "arrival_date": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "departure_date": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "The difference between arrival and departure date must be at least 12 hours!"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "guest_number": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "A reservation for a room can be for 3 people at most"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "night": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "price": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "total_price": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "JWTAccess": []
    },
    {
      "JWTRefresh": []
    }
  ]
}
